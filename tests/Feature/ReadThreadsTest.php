<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{
    private $thread;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory('App\Thread')->create();
    }

    /**
     * A user can read all threads
     *
     * @return void
     */
    public function test_can_a_user_read_all_threads()
    {
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_read_a_single_thread()
    {
//        dd($this->thread->path());
        $this->get($this->thread->path())
            ->assertSee($this->thread->title);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_read_replies_that_are_associated_with_a_thread()
    {
        $reply = factory('App\Reply')
            ->create(['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->body);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_filter_threads_by_a_channel()
    {
        $channel = factory('App\Channel')->create();
        $threadInChannel = factory('App\Thread')->create(['channel_id' => $channel->id]);
        $threadNotInChannel = factory('App\Thread')->create();

        $this->get('/threads/' . $channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_filter_threads_by_any_username()
    {
        $this->signIn(factory('App\User')->create(['name' => 'Useinoff']));

        $thread = factory('App\Thread')->create(['user_id' => auth()->id()]);
        $notThisUsersThread = factory('App\Thread')->create();

        $this->get('threads?by=Useinoff')
            ->assertSee($thread->title)
            ->assertDontSee($notThisUsersThread->title);
    }

    public function test_a_user_can_filter_threads_by_popularity()
    {
        // Given we have three  threads
        // With 2, 3 and 0 replies
        $threadWithTwoReplies = factory('App\Thread')->create();
        factory('App\Reply')->create(['thread_id' => $threadWithTwoReplies->id]);
        factory('App\Reply')->create(['thread_id' => $threadWithTwoReplies->id]);

        $threadWithThreeReplies = factory('App\Thread')->create();
        factory('App\Reply')->create(['thread_id' => $threadWithThreeReplies->id]);
        factory('App\Reply')->create(['thread_id' => $threadWithThreeReplies->id]);
        factory('App\Reply')->create(['thread_id' => $threadWithThreeReplies->id]);

        $threadWithNoReplies = $this->thread;

        // When I filter all threads by popularity
        $response = $this->getJson('threads?popular=1')->json();
        // Then they should be returned from most replies to least

        $this->assertEquals([3,2,0], array_column($response, 'replies_count'));
    }
}
