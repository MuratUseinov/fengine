<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{
    private $thread;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory('App\Thread')->create();
    }

    /**
     * A user can read all threads
     *
     * @return void
     */
    public function test_can_a_user_read_all_threads()
    {
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_read_a_single_thread()
    {
//        dd($this->thread->path());
        $this->get($this->thread->path())
            ->assertSee($this->thread->title);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_read_replies_that_are_associated_with_a_thread()
    {
        $reply = factory('App\Reply')
            ->create(['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->body);
    }

    /**
     * A user can read a single thread page
     *
     * @return void
     */
    public function test_can_a_user_filter_threads_by_a_channel()
    {
        $channel = factory('App\Channel')->create();
        $threadInChannel = factory('App\Thread')->create(['channel_id' => $channel->id]);
        $threadNotInChannel = factory('App\Thread')->create();

        $this->get('/threads/' . $channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }
}
